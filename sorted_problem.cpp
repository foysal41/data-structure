#include <bits/stdc++.h> // সব ধরনের স্ট্যান্ডার্ড হেডার ফাইল একসাথে ইনক্লুড করার জন্য
using namespace std;     // std:: না লিখে সরাসরি ফাংশন/অবজেক্ট ইউজ করার জন্য

int main()
{
    int t;
    cin >> t; // টেস্ট কেসের সংখ্যা ইনপুট নেওয়া হচ্ছে

    while (t--) // প্রতিটি টেস্ট কেসের জন্য লুপ
    {
        set<int> s; // সেট ডিক্লেয়ার করা হচ্ছে (ডুপ্লিকেট ভ্যালু রাখবে না এবং অটোমেটিক সর্ট করবে)
        int n;
        cin >> n; // লিস্টের সাইজ ইনপুট

        while (n--) // লিস্টের প্রতিটি এলিমেন্ট ইনপুট নেওয়ার জন্য লুপ
        {
            int val;
            cin >> val;     // একটি সংখ্যা ইনপুট নেওয়া হচ্ছে
            s.insert(val);  // সেটে ভ্যালু যোগ করা হচ্ছে (ডুপ্লিকেট অটো রিমুভ হবে, সর্টেড থাকবে)
        }

        for (auto it = s.begin(); it != s.end(); it++) // সেটের শুরু থেকে শেষ পর্যন্ত ইটারেট করা
        {
            cout << *it << " "; // প্রতিটি ভ্যালু প্রিন্ট করা হচ্ছে
        }
        cout << endl; // প্রতিটি টেস্ট কেসের আউটপুট শেষে নতুন লাইন
    }

    return 0; // প্রোগ্রাম সফলভাবে শেষ
}


/* 
https://www.hackerrank.com/contests/final-exam-a-basic-data-structure-a-batch-07/challenges/sorted-3-1

Question analysis:- 
এখানে set ডাটা স্ট্রাকচার ব্যবহার করাই তোমার প্রোবলেমের জন্য সেরা পদ্ধতি, কারণ:

এটা অটোমেটিক ডুপ্লিকেট রিমুভ করে।

সব ভ্যালুকে অ্যাসেন্ডিং অর্ডারে রাখে।

ইনসার্ট/সার্চ অপারেশন গড়ে O(log n) টাইমে হয়।


https://docs.google.com/document/d/1kNHzEoMLBAK9P4ElLffl5lxjYeyOSHFEVtqdWIuMrig/edit?usp=sharing

*/