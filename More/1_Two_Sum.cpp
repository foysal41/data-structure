#include<bits/stdc++.h>
using namespace std;

// ЁЯСЙ Singly Linked List-ржПрж░ ржирзЛржб
class ListNode
{
    public:
    int val; // ржирзЛржбрзЗ рж░рж╛ржЦрж╛ ржорж╛ржи
    ListNode* next; // ржкрж░рзЗрж░ ржирзЛржбрзЗрж░ ржкржпрж╝рзЗржирзНржЯрж╛рж░
    
    ListNode(int val){
        this->val = val;
        this->next = NULL;
    }
};

// ЁЯСЙ ржжрзБржЯрж┐ Sorted Linked List merge ржХрж░рж╛рж░ рж╕ржорж╛ржзрж╛ржи (Recursive)
class Solution
{
    public:
    // list1 ржПржмржВ list2 ржЙржнржпрж╝ржЗ ascending sorted ржзрж░рзЗ ржирзЗржУржпрж╝рж╛
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2)
    {

        if(!list1) return list2;// Base case-1: list1 ржлрж╛ржБржХрж╛ рж╣рж▓рзЗ list2-ржЗ ржлрж▓рж╛ржлрж▓
        if(!list2) return list1;// Base case-2: list2 ржлрж╛ржБржХрж╛ рж╣рж▓рзЗ list1-ржЗ ржлрж▓рж╛ржлрж▓

        if(list1->val <= list2->val){ // ржЫрзЛржЯ ржорж╛ржи ржпрзЗржЯрж╛рж░, рж╕рзЗржЯрж╛ржХрзЗржЗ head рж╣рж┐рж╕рж╛ржмрзЗ ржирзЗржмрзЛ

            // list1 ржЫрзЛржЯ тЗТ list1 ржирж┐ржпрж╝рзЗ ржирж┐рж▓рж╛ржо, ржПржмрж╛рж░ list1->next ржЖрж░ ржкрзБрж░рзЛ list2 merge ржХрж░ржмрзЛ
            list1->next = mergeTwoLists(list1->next, list2); 
            return list1; // list1 ржПржЦржи merged рж▓рж┐рж╕рзНржЯрзЗрж░ ржирждрзБржи head
        }else{

            // list2 ржЫрзЛржЯ тЗТ list2 ржирж┐ржпрж╝рзЗ ржирж┐рж▓рж╛ржо, ржПржмрж╛рж░ ржкрзБрж░рзЛ list1 ржЖрж░ list2->next merge ржХрж░ржмрзЛ
            list2->next = mergeTwoLists(list1, list2->next);
            return list2; // list2 ржПржЦржи merged рж▓рж┐рж╕рзНржЯрзЗрж░ ржирждрзБржи head
        }
    }
};


// ЁЯСЙ Tail-ржП ржирждрзБржи ржирзЛржб ржпрзЛржЧ ржХрж░рж╛ (Insert at Tail)
void insertAtTail(ListNode* &head, int val)
{
    ListNode* NewNode = new ListNode(val); // ржирждрзБржи ржирзЛржб рждрзИрж░рж┐

    // рж▓рж┐рж╕рзНржЯ ржлрж╛ржБржХрж╛ рж╣рж▓рзЗ head-ржПржЗ рж╕рзЗржЯ ржХрж░рзЛ
    if(head == NULL){
        head = NewNode;
        return;
    }
    // ржиржЗрж▓рзЗ рж╢рзЗрж╖ ржирзЛржб ржкрж░рзНржпржирзНржд ржпрзЗрждрзЗ рж╣ржмрзЗред
    ListNode* temp = head;

    while(temp->next != NULL){
        temp = temp->next;
    }

    // рж╢рзЗрж╖рзЗ ржирждрзБржи ржирзЛржб ржЕрзНржпрж╛ржЯрж╛ржЪ ржХрж░рж╛
    temp->next= NewNode;

}

// ЁЯСЙ n рж╕ржВржЦрзНржпржХ ржЗржиржкрзБржЯ ржкржбрж╝рзЗ ржПржХржЯрж┐ Linked List ржмрж╛ржирж╛ржирзЛ
ListNode* create_list_from_input(int n){
    ListNode* head = NULL;  // рж╢рзБрж░рзБрждрзЗ рж▓рж┐рж╕рзНржЯ ржлрж╛ржБржХрж╛
    for(int i=0; i<n; i++){
        int val;
        cin >> val; // ржкрзНрж░рждрж┐ржЯрж┐ ржнрзНржпрж╛рж▓рзБ ржЗржиржкрзБржЯ
        insertAtTail(head,val); // ржЯрзЗржЗрж▓рзЗ ржмрж╕рж┐ржпрж╝рзЗ ржжрж╛ржУ

    }
    return head; // рж▓рж┐рж╕рзНржЯрзЗрж░ head рж░рж┐ржЯрж╛рж░рзНржи

}

// ЁЯСЙ Linked List ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ (рж╕рзНржкрзЗрж╕-рж╕рзЗржкрж╛рж░рзЗржЯрзЗржб)
void printList(ListNode* head)
{
    ListNode* temp = head; // ржЯрзНрж░рж╛ржнрж╛рж░рзНрж╕рзЗрж░ ржЬржирзНржп ржХрж╛рж░рзНрж╕рж░

    while(temp != NULL){
        cout << temp->val << " "; // ржмрж░рзНрждржорж╛ржи ржирзЛржбрзЗрж░ ржорж╛ржи
       if(temp->next){
        cout << "-> "; // рж╢рзЗрж╖ ржЖржЗржЯрзЗржо ржирж╛ рж╣рж▓рзЗ рж╕рзНржкрзЗрж╕ ржжрж╛ржУ
       }
        temp = temp->next; // ржкрж░рзЗрж░ ржирзЛржбрзЗ ржпрж╛ржм
    }
    

    
}

// ЁЯСЙ ржорзЗржЗржи ржлрж╛ржВрж╢ржи: ржЗржиржкрзБржЯ ржирж╛ржУ, ржжрзБржЗ рж▓рж┐рж╕рзНржЯ ржмрж╛ржирж╛ржУ, merge ржХрж░рзЛ, ржЖржЙржЯржкрзБржЯ ржжрж╛ржУ
int main(){
    int n1, n2;

    // ржкрзНрж░ржержо рж▓рж┐рж╕рзНржЯрзЗрж░ рж╕рж╛ржЗржЬ ржУ ржПрж▓рж┐ржорзЗржирзНржЯрж╕
    cin >> n1;
    ListNode* list1 = create_list_from_input(n1);

     // ржжрзНржмрж┐рждрзАржпрж╝ рж▓рж┐рж╕рзНржЯрзЗрж░ рж╕рж╛ржЗржЬ ржУ ржПрж▓рж┐ржорзЗржирзНржЯрж╕
    cin >> n2;
    ListNode* list2 = create_list_from_input(n2);

    // Merge ржЪрж╛рж▓рж╛ржирзЛ
    Solution sol;
    ListNode* merged = sol.mergeTwoLists(list1, list2);

    printList(merged);

    return 0;
}



//https://leetcode.com/problems/merge-two-sorted-lists/description/