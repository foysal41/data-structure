#include<bits/stdc++.h> 
using namespace std;     


class Solution
{
    public:
        int removeDuplicate(vector<int>& nums){  // ЁЯФ╣ ржлрж╛ржВрж╢ржи: sorted array ржерзЗржХрзЗ duplicate ржорзБржЫржмрзЗ (in-place)
            int n = (int)nums.size();            // ЁЯФ╣ nums ржПрж░ рж╕рж╛ржЗржЬ ржмрзЗрж░ ржХрж░рж▓рж╛ржо
            if(n  == 0) return 0;                 // ЁЯФ╣ рж╕рзЗржлржЯрж┐ ржЪрзЗржХ: ржЕрзНржпрж╛рж░рзЗ ржлрж╛ржБржХрж╛ рж╣рж▓рзЗ 0 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржм (constraint ржП ржирж╛ ржерж╛ржХрж▓рзЗржУ ржнрж╛рж▓рзЛ ржЕржнрзНржпрж╛рж╕)

            int i = 0;                            // ЁЯФ╣ slow pointer (рж╢рзБрж░рзБрждрзЗ ржкрзНрж░ржержо ржЙржкрж╛ржжрж╛ржи unique ржзрж░рзЗ)
            for(int j = 1; j < n; j++){            // ЁЯФ╣ fast pointer (рзз ржерзЗржХрзЗ рж╢рзБрж░рзБ, ржХрж╛рж░ржг рзж-рждрзЗ i ржЖржЫрзЗ)
                if(nums[j] != nums[i]){            // ЁЯФ╣ ржирждрзБржи unique element ржкрзЗрж▓рзЗржЗ...
                    i++;                           //    slow pointer ржПрж░ ржЕржмрж╕рзНржерж╛ржи рзз ржзрж╛ржк ржПржЧрж┐рзЯрзЗ ржжрж╛ржУ
                    nums[i] = nums[j];             //    рж╕рзЗржЗ ржЬрж╛рзЯржЧрж╛рзЯ ржирждрзБржи unique element ржмрж╕рж╛ржУ
                    // тЪа ржПржЦрж╛ржирзЗ nums[i] = nums[j] ржорж╛ржирзЗ j index ржПрж░ ржорж╛ржи i index ржП ржХржкрж┐ рж╣рзЯред
                    //    ржорж╛ржирзЗ array-ржПрж░ рж╢рзБрж░рзБрждрзЗ unique ржЧрзБрж▓рзЛ ржЬржорж╛ рж╣ржЪрзНржЫрзЗред
                }
            }
            return i + 1;                          // ЁЯФ╣ unique element рж╕ржВржЦрзНржпрж╛ = рж╢рзЗрж╖ unique index + 1
            // тЪа ржЖржЧрзЗ ржПржЦрж╛ржирзЗ return n + 1 рж▓рж┐ржЦрзЗржЫрж┐рж▓рзЗ, ржпрзЗржЯрж╛ ржнрзБрж▓ ржЫрж┐рж▓ред
        }
};

int main(){
    int n;
    cin >> n;                                     // ЁЯФ╣ ржЕрзНржпрж╛рж░рзЗрж░ рж╕рж╛ржЗржЬ ржЗржиржкрзБржЯ ржирж┐ржЪрзНржЫрж┐
    vector<int> nums(n);                          // ЁЯФ╣ рж╕рж╛ржЗржЬ n ржжрж┐рзЯрзЗ ржнрзЗржХрзНржЯрж░ ржмрж╛ржирж╛рж▓рж╛ржо

    for(int i = 0; i < n; i++){                   // ЁЯФ╣ nums ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ ржнрзНржпрж╛рж▓рзБ ржЗржиржкрзБржЯ ржирж┐ржЪрзНржЫрж┐
        cin >> nums[i];
    }

    Solution sol;                                 // ЁЯФ╣ Solution ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐
    int k = sol.removeDuplicate(nums);            // ЁЯФ╣ removeDuplicate ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж▓рж╛ржо, unique element count ржкрзЗрждрзЗ

    cout << k << "\n";                            // ЁЯФ╣ unique element рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж▓рж╛ржо
    for(int i = 0; i < k; i++){                   // ЁЯФ╣ ржкрзНрж░ржержо k ржЯрж╛ element ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржм (ржХрж╛рж░ржг unique ржЧрзБрж▓рзЛ ржкрзНрж░ржержо k ржкржЬрж┐рж╢ржирзЗ ржЖржЫрзЗ)
        cout << nums[i] << (i + 1 == k ? '\n' : ' '); // ЁЯФ╣ рж╢рзЗрж╖рзЗрж░ ржкрж░рзЗ рж╕рзНржкрзЗрж╕ ржирж╛ ржжрж┐рзЯрзЗ newline ржжрж┐ржЪрзНржЫрж┐
    }

    return 0;                                     // ЁЯФ╣ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо рж╢рзЗрж╖
}


//https://leetcode.com/problems/remove-duplicates-from-sorted-array/
//https://docs.google.com/document/d/1VZ-4tZwh64t_eTPMkVvcgxQYDd1eIxKKkuhqfA__9K8/edit?pli=1&tab=t.0