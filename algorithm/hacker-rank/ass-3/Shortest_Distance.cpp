#include<bits/stdc++.h>
using namespace std;



int main(){
    int n, e; 
    cin >> n >> e;  //01) ржПржЧрзБрж▓рзЛ ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржкрзБржЯ ржерзЗржХрзЗ ржирзЗрзЯрж╛ рж╣ржЪрзНржЫрзЗред


        //02) ржпржжрж┐ int ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐, рждрж╛рж╣рж▓рзЗ рж╕рж╣ржЬрзЗржЗ overflow рж╣рзЯрзЗ ржпрж╛ржмрзЗред
    long long int adj_mat[n+5][n+5];


    //03) Adj-matrix ржПрж░ рж╕ржм ржХржпрж╝ржЯрж┐ ржШрж░рзЗ infinete ржХрж░рзЗ ржжрж┐ржм . ржЖржорж░рж╛ ржЬрж╛ржирж┐ memset ржлрж╛ржВрж╢ржи int_max ржП ржкрзНрж░ржкрж╛рж░рж▓рж┐ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ рждрж╛ржЗ ржЖржорж░рж╛ for loop ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржм
    for(int i=1; i<=n; i++)
    {
        for(int j = 1; j<=n; j++)
        {
            if(i==j)
            {
                adj_mat[i][j] = 0;
            }else{
                adj_mat[i][j]  = LLONG_MAX;
            }
        }
    }


    //04) ЁЯСЙ ржпрзЗрж╣рзЗрждрзБ ржЧрзНрж░рж╛ржл ржбрж┐рж░рзЗржХрзНржЯрзЗржб ржЖрж░ ржПржХржЗ a->b ржП ржПржХрж╛ржзрж┐ржХ ржПржЬ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ, рждрж╛ржЗ ржЖржорж░рж╛ рж╕рж░рзНржмржирж┐ржорзНржи ржХрж╕рзНржЯ рж░рж╛ржЦрж┐ред
    while(e--)
    {
        long long  a , b, c;
        cin >> a >> b >> c;

        adj_mat[a][b] = min(adj_mat[a][b], c);

        /* 05 ) рж▓ржЬрж┐ржХ: ржпржжрж┐ i -> k ржПржмржВ k -> j ржжрзБржЯрзЛ ржкржержЗ ржерж╛ржХрзЗ, ржЖрж░ i -> k -> j ржПрж░ ржХрж╕рзНржЯ i -> j ржПрж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╣рзЯ, 
        рждрж╛рж╣рж▓рзЗ adj_mat[i][j] ржЖржкржбрзЗржЯ ржХрж░рж┐ред ЁЯСЙ ржорж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбржХрзЗ "ржоржзрзНржпржмрж░рзНрждрзА рж╕рзНржЯрзЗрж╢ржи" ржзрж░рзЗ ржЫрзЛржЯ рж░рж╛рж╕рзНрждрж╛ржЧрзБрж▓рзЛ ржмрзЗрж░ ржХрж░рж╛ред 
        
        рж╕ржмрж╛рзЯ k <= n ржЫрзЛржЯ ржмрж╛ рж╕ржорж╛ржи ржжрж┐рждрзЗ рж╣ржмрзЗ
        */
        for(int k=1; k<=n; k++)
        {
            for(int i =1; i<=n; i++)
            {
                for(int j=1; j<=n; j++ ){
                    if(adj_mat[i][k] != LLONG_MAX && adj_mat[k][j]  != LLONG_MAX && adj_mat[i][k] + adj_mat[k][j] < adj_mat[i][j])
                    {
                        adj_mat[i][j] = adj_mat[i][k] + adj_mat[k][j];
                    }
                }
            }
        }
    }



    /* 
  ЁЯСЙ  q рж╕ржВржЦрзНржпржХ ржХрзБрзЯрзЗрж░рж┐ ржЖрж╕ржмрзЗред
ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж┐ ржХрзБрзЯрзЗрж░рж┐рждрзЗ рж╕рзЛрж░рзНрж╕ s ржЖрж░ ржбрзЗрж╕рзНржЯрж┐ржирзЗрж╢ржи d ржжрзЗржУрзЯрж╛ ржерж╛ржХржмрзЗред
ЁЯСЙ ржпржжрж┐ s -> d ржПрж░ ржЬржирзНржп ржХрзЛржирзЛ ржкрже ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ -1 ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗред
ЁЯСЙ ржЕржирзНржпржерж╛рзЯ рж╕рж░рзНржмржирж┐ржорзНржи ржХрж╕рзНржЯ ржкрзНрж░рж┐ржирзНржЯ ржХрж░ржмрзЗред

    */
    int q;
    cin >> q;
    while(q--)
    {
        int s, d;
        cin >> s >> d;

        if(adj_mat[s][d] == LLONG_MAX)
        {
            cout << -1 << endl;
        }else{
            cout << adj_mat[s][d] << endl;
        }
    }





    return 0;
}

//https://www.hackerrank.com/contests/assignment-02-a-introduction-to-algorithms-a-batch-07/challenges/shortest-distance-2
//https://docs.google.com/document/d/1zY_gWiZghgxgD6T_tc1ma-m5RQvk8urO5AbfDDPVkmo/edit?usp=sharing