#include<bits/stdc++.h>
using namespace std;

// 1Ô∏è‚É£: TreeNode ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø
class Node{
    public:
    int val;
    Node* left;
    Node* right;

    Node(int val){
        this->val = val;
        this->left = NULL;
        this->right = NULL;
    }
};

// 2Ô∏è‚É£: Tree input ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (Level order ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
//https://docs.google.com/document/d/1_uHZeCaLCY-zdEt5VXmWHKnc_ovtLdKS3O9yW-PVe5o/edit?tab=t.0#heading=h.jdc9yps3qnlr
Node* input_tree(){
    int val;
    cin >> val;
    Node* root;
    if(val == -1) root = NULL;
        else root = new Node(val);

    queue<Node* > q;
    if(root != NULL) q.push(root);

    while(!q.empty()){
        Node* parent = q.front();
        q.pop();

        int l,r;
        cin >> l >> r;
        Node* myLeft, *myRight;

        if(l == -1) myLeft = NULL;
            else myLeft = new Node(l);
        if(r == -1 ) myRight = NULL;
            else myRight = new Node(r);

        parent->left = myLeft;
        parent->right = myRight;


        //Push child  node to left and right
        if(parent->left) q.push(parent->left);
        if(parent->right) q.push(parent->right);
    }

return root;
}


// 3Ô∏è‚É£: ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶®‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
void print_level_nodes(Node* root, int target_level){
    if(root == NULL){
        cout << "Invalid" << endl;
        return;
    }

    queue<pair<Node*, int>>q; // 4Ô∏è‚É£: ‡¶è‡¶ï‡¶ü‡¶æ queue ‡¶¨‡¶æ‡¶®‡¶æ‡¶≤‡¶æ‡¶Æ ‡¶Ø‡ßá‡¶ü‡¶æ Node ‡¶ì Level ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
    q.push({root, 0});         // 5Ô∏è‚É£: ‡¶∞‡ßÅ‡¶ü ‡¶®‡ßã‡¶°‡¶ü‡¶æ‡¶ï‡ßá level 0 ‡¶¶‡¶ø‡ßü‡ßá ‡¶¢‡ßÅ‡¶ï‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ
    bool isFoundValue = false;  // 6Ô∏è‚É£: ‡¶ß‡¶∞‡¶≤‡¶æ‡¶Æ ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡¶æ‡¶ô‡ßç‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶™‡¶æ‡¶á‡¶®‡¶ø
   

    while(!q.empty()){
        pair<Node*, int> parent = q.front(); // 7Ô∏è‚É£: ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ pair ‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
        q.pop();

        Node* node = parent.first;          // 8Ô∏è‚É£: pair ‡¶•‡ßá‡¶ï‡ßá node ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
        int level = parent.second;           // 9Ô∏è‚É£: pair ‡¶•‡ßá‡¶ï‡ßá level ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ

        if(level == target_level){          // üîü: ‡¶Ø‡¶¶‡¶ø level ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü, ‡¶Æ‡¶æ‡¶®‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶¨‡ßã
            cout << node->val << " ";
            isFoundValue = true;
        }

         // 1Ô∏è‚É£1Ô∏è‚É£: ‡¶Ø‡¶¶‡¶ø child ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞‡¶ï‡ßá queue ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ level ‡¶∏‡¶π
        if(node->left) q.push({node->left, level + 1});
        if(node->right) q.push({node->right, level + 1});
    }

        // 1Ô∏è‚É£2Ô∏è‚É£: ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶®‡¶æ ‡¶™‡¶æ‡¶á target level ‡¶è, ‡¶§‡¶æ‡¶π‡¶≤‡ßá Invalid ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶¨‡ßã
    if(!isFoundValue){
        cout << "Invalid" << endl;
    }
}


int main(){
    Node* root = input_tree(); // 1Ô∏è‚É£3Ô∏è‚É£: Tree input ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
    int level;
    cin >> level; // 1Ô∏è‚É£4Ô∏è‚É£: Target level ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø

    print_level_nodes(root, level); // 1Ô∏è‚É£5Ô∏è‚É£: ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶ø‡ßü‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
    return 0;
}





// https://www.hackerrank.com/contests/assignment-04-a-basic-data-structure-a-batch-07/challenges/level-nodes-2